[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "json-editor-mcp-tool"
version = "0.1.0"
description = "MCP tool for natural language-based JSON document editing"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [
    {name = "JSON Editor MCP Tool"}
]
keywords = ["mcp", "json", "editor", "llm", "natural-language"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core MCP and JSON processing dependencies
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # FastAPI REST API dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # Redis for session management
    "redis>=5.0.0",
    "hiredis>=2.0.0",
    
    # LLM Service Providers
    "google-genai>=0.3.0",
    "openai>=1.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    
    # Configuration and environment
    "PyYAML>=6.0.0",
    "python-dotenv>=1.0.0",
    
    # Logging and monitoring
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
    
    # Security and validation
    "cryptography>=41.0.0",
    "jsonschema>=4.17.0",
    
    # Performance and utilities
    "ujson>=5.7.0",
    "orjson>=3.8.0",
    
    # Additional utilities
    "requests>=2.31.0",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
# LLM Provider extras
gemini = ["google-genai>=0.3.0"]
openai = ["openai>=1.0.0"]
all-providers = [
    "google-genai>=0.3.0",
    "openai>=1.0.0"
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "coverage>=7.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "fakeredis>=2.0.0",  # For Redis testing without actual Redis server
    "httpx>=0.25.0",  # For async testing
]

[project.urls]
Homepage = "https://github.com/json-editor-mcp-tool"
Repository = "https://github.com/json-editor-mcp-tool"
Issues = "https://github.com/json-editor-mcp-tool/issues"

[project.scripts]
json-editor-mcp = "json_editor_mcp.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["json_editor_mcp*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["json_editor_mcp"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "google.genai.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["json_editor_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]